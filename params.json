{"name":"Proxycplusplus","tagline":"Proxy em C++","body":"# Proxy em C++\r\nO Padrão de Projeto Proxy é um padrão Estrutural cujo objetivo principal é encapsular um objeto através de um outro objeto que possui a mesma interface, de forma que o segundo objeto, conhecido como “Proxy”, controla o acesso ao primeiro, que é o objeto real. O padrão adiciona uma camada de indireção ao aceitar requisições de acesso de um objeto cliente e passá-lo ao objeto real, conforme necessário. É bom observar que o método encontrado no objeto proxy pode realizar operações antes ou depois da chamada do método do objeto real.\r\n\r\n## Diagrama de Classe Genérico\r\n![Diagrama de Classe - Proxy](https://imagizer.imageshack.us/v2/602x488q90/843/d2x7.png)\r\n\r\n## Tipos de Proxy e Seus Usos\r\n* **Cache Proxy** - um cache proxy melhora a performance de seu objeto protegido quando este realizar procedimento demorados e que retornam resultado que pouco variam. Por exemplo, o objeto protegido provê um método que calcula os número primos. Quando a primeira chamada ao objeto é feita, o proxy passa a requisição para o objeto real. O resultado da chamada é guardado no proxy, de modo que em um segundo instante não seja preciso invocar o objeto real.\r\n* **Protection Proxy** - um protection proxy adiciona uma camada de proteção entre o objeto cliente e o objeto real. Por exemplo, o objeto real possui métodos de recuperação de dados em um banco de dados. O protection proxy pode adicionar verificações de autenticidade antes de permitir que os dados pedidos sejam retornados. Ou ainda pode filtrar os dados recebidos de modo que o cliente só receba aquilo que possui privilégio para ver.\r\n* **Remote Proxy** - um remote proxy provê acesso a um objeto real localizado em lugares diferentes, normalmente através de conexões de rede. O proxy realiza as operações necessárias para que a requisição do cliente possa ser transferida para o objeto real, e aceita os resultados recebido antes de entregá-los ao cliente.\r\n* **Smart Proxy** - um smart proxy adiciona funcionalidades extras nas chamadas do objeto real. Essa funcionalidade é muitas vezes invisível para o cliente. Por exemplo, ele pode contar as referências existentes de um recurso altamente requisitado para que, quando sua quantidade chegar à zero, o proxy possa retirar esse recurso da memória. Também é possível utilizá-lo para fazer o log das chamadas ao objeto real.\r\n* **Virtual Proxy** - um virtual proxy provê uma versão simplificada de um objeto complexo. Somente quando os detalhes do objeto requisitado forem necessários é que o proxy irá instanciar o objeto real, semelhante ao Lazy Inicialization do Hibernate.\r\n\r\n\r\n## Exemplo de Uso","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}